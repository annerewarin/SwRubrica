/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;
import javax.swing.JOptionPane;

/**
 *
 * @author babya
 */
public class InputProperties extends javax.swing.JFrame {
    
    private static String fileProperties = "database_credenziali.properties";
    private static String fileSchema = "schema_database.sql";
    private static Connection conn = null;

    /**
     * Creates new form InputProperties
     */
    public InputProperties() {
        initComponents();
    }
    
    public static void setProperties(String key[], String value[]) throws IOException {
        Properties properties = new Properties();
        properties.load(new FileInputStream("database_credenziali.properties"));
        properties.setProperty(key[0], value[0]);
        properties.setProperty(key[1], value[1]);
        properties.setProperty(key[2], value[2]);
        properties.setProperty(key[3], value[3]);
        properties.setProperty(key[4], value[4]);
        properties.store(new FileOutputStream("database_credenziali.properties", false), null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        usernamePropTF = new javax.swing.JTextField();
        passwordPropTF = new javax.swing.JPasswordField();
        databasePropTF = new javax.swing.JTextField();
        portaPropTF = new javax.swing.JTextField();
        salvaPropTF = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        ipserverPropTF = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Set Up");

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel1.setText("Set Up Properties");

        jLabel2.setText("Username");

        jLabel3.setText("Password");

        jLabel4.setText("Database");

        jLabel5.setText("Porta");

        usernamePropTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usernamePropTFMouseClicked(evt);
            }
        });

        passwordPropTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                passwordPropTFMouseClicked(evt);
            }
        });

        databasePropTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                databasePropTFMouseClicked(evt);
            }
        });

        portaPropTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                portaPropTFMouseClicked(evt);
            }
        });

        salvaPropTF.setBackground(new java.awt.Color(0, 153, 0));
        salvaPropTF.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        salvaPropTF.setForeground(new java.awt.Color(255, 255, 255));
        salvaPropTF.setText("Salva");
        salvaPropTF.setBorder(null);
        salvaPropTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvaPropTFActionPerformed(evt);
            }
        });

        jLabel6.setText("IPServer");

        ipserverPropTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ipserverPropTFMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(134, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(129, 129, 129))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5))
                        .addGap(75, 75, 75)
                        .addComponent(salvaPropTF))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(usernamePropTF)
                            .addComponent(passwordPropTF)
                            .addComponent(databasePropTF)
                            .addComponent(portaPropTF, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                            .addComponent(ipserverPropTF))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(usernamePropTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(passwordPropTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(ipserverPropTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(databasePropTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portaPropTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(salvaPropTF)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void salvaPropTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvaPropTFActionPerformed
        boolean valida = true;
        
        String usernametf = usernamePropTF.getText();
        if(usernametf.equals("")){
            usernamePropTF.setBackground(Color.red);
            valida = false;
        }
        
        String passwordtf = new String (passwordPropTF.getPassword());
        if(passwordtf.equals("")){
            passwordPropTF.setBackground(Color.red);
            valida = false;
        }
        
        String ipservertf = ipserverPropTF.getText();
        if(ipservertf.equals("")){
            ipserverPropTF.setBackground(Color.red);
            valida = false;
        }
        
        String databasetf = databasePropTF.getText();
        if(databasetf.equals("")){
            databasePropTF.setBackground(Color.red);
            valida = false;
        }
        
        String portatf = portaPropTF.getText();
        if(portatf.equals("")){
            portaPropTF.setBackground(Color.red);
            valida = false;
        }
        
        if(valida)
        {
            try {            
                String pass = new String(passwordPropTF.getPassword());
                String[] key = {"username", "password", "ipserver", "database", "porta"};
                String[] val = {usernamePropTF.getText(), pass, ipserverPropTF.getText(), databasePropTF.getText(), portaPropTF.getText()};
                setProperties(key, val);
                System.out.println("Input avvenuto con successo");


                Properties properties = new Properties();
                try{
                    properties.load(new FileInputStream("database_credenziali.properties"));
                    String username = properties.getProperty("username");
                    String password = properties.getProperty("password");
                    String ipserver = properties.getProperty("ipserver");
                    String database = properties.getProperty("database");
                    String porta = properties.getProperty("porta");
                    System.out.println(username+" "+password+" "+database+" "+porta);
                    if((username.equals("")) || (password.equals("")) || (ipserver.equals("")) || (database.equals("")) || (porta.equals(""))){
                        JOptionPane.showMessageDialog(null, "Input properties non validi.");
                        InputProperties ip = new InputProperties();
                        ip.setVisible(true);
                    }
                    else{
                        System.out.println("Input properties validi.");
                        String url = "jdbc:postgresql://"+ipserver+":"+porta+"/" + database;
                        conn = DriverManager.getConnection("jdbc:postgresql://"+ipserver+":"+porta+"/" + database + "?user=" + username + "&password=" + password);
                        System.out.println("Test di connessione avvenuto con successo");


                        try{
                            String line;

                            BufferedReader input = new BufferedReader(new FileReader("schema_database.sql"));
                            while((line = input.readLine())!= null){
                                Statement stat = conn.createStatement();
                                stat.executeUpdate(line);
                                //System.out.println(line);
                            }
                            input.close();        
                        }
                        catch(Exception err){
                            JOptionPane.showMessageDialog(null, err.getMessage());
                            properties.setProperty("username", "");
                            properties.setProperty("password", "");
                            properties.setProperty("ipserver", "");
                            properties.setProperty("database", "");
                            properties.setProperty("porta", "");
                            try{
                                properties.store(new FileOutputStream("database_credenziali.properties"), null);
                            }
                            catch(IOException err2){
                                JOptionPane.showMessageDialog(null, err2.getMessage());
                            }
                        }
                        conn.close();
                        super.dispose();
                        Login l = new Login();
                        l.setVisible(true);
                    }
                }
                catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
                }
                catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());

                }
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        }
    }//GEN-LAST:event_salvaPropTFActionPerformed

    private void usernamePropTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usernamePropTFMouseClicked
        usernamePropTF.setBackground(Color.white);
    }//GEN-LAST:event_usernamePropTFMouseClicked

    private void passwordPropTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passwordPropTFMouseClicked
        passwordPropTF.setBackground(Color.white);
    }//GEN-LAST:event_passwordPropTFMouseClicked

    private void ipserverPropTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ipserverPropTFMouseClicked
        ipserverPropTF.setBackground(Color.white);
    }//GEN-LAST:event_ipserverPropTFMouseClicked

    private void databasePropTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_databasePropTFMouseClicked
        databasePropTF.setBackground(Color.white);
    }//GEN-LAST:event_databasePropTFMouseClicked

    private void portaPropTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_portaPropTFMouseClicked
        portaPropTF.setBackground(Color.white);
    }//GEN-LAST:event_portaPropTFMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InputProperties.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InputProperties.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InputProperties.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InputProperties.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InputProperties().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField databasePropTF;
    private javax.swing.JTextField ipserverPropTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField passwordPropTF;
    private javax.swing.JTextField portaPropTF;
    private javax.swing.JButton salvaPropTF;
    private javax.swing.JTextField usernamePropTF;
    // End of variables declaration//GEN-END:variables
}
